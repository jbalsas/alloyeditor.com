{"title":"alloyeditor.com","githubRepo":"marcoscv-work/alloyeditor.com","googleAnalytics":"UA-37033501-5","version":"1.4.1","index":{"title":"Home","description":"a modern WYSIWYG editor built on top of CKEDITOR, designed to create modern and gorgeous web content","content":" Copyright © 2017 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","id":"pages","url":"/.","children":{"api":{"title":"API","description":"API Docs.","url":"/api/1.4.1/","weight":3,"content":"","srcFilePath":"src/pages/api/index.fm","id":"api"},"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","url":"/docs","children":{"search":{"description":"Documentation search results.","hidden":true,"title":"Search","content":" Electric Docs Start learning how to leverage the power of Electric. ","srcFilePath":"src/pages/docs/search.soy","id":"search","url":"/docs/search.html"},"develop":{"children":{"how_to_build_it":{"description":"How to build a version of AlloyEditor.","layout":"guide","title":"Build it","weight":1,"content":" How to build a version of AlloyEditor. Install NodeJS Using your browser, navigate to http://nodejs.org and install NodeJS. Install Gulp Open a terminal on your computer and execute [sudo] npm install -g gulp Fork AlloyEditor Use the Fork button in our Github Repository page to get a copy of alloyEditor. After that, follow the instructions to clone the project into your computer. Install AlloyEditor dependencies Navigate to the AlloyEditor project in your computer and execute [sudo] npm install Build AlloyEditor Navigate to the AlloyEditor project in your computer and execute gulp build There are other gulp tasks you can use like release to generate a bundled zip file, or watch if you're in development mode ","srcFilePath":"src/pages/docs/develop/how_to_build_it.md","id":"how_to_build_it","url":"/docs/develop/how_to_build_it.html"},"create":{"children":{"create_buttons":{"description":"If you run the editor with the default UI, which is written in React, then adding a button will be straightforward. Buttons are standard React classes. For your convenience, there is also a number of mixins, which you can use that provide basic functionality out of the box. Then, use CKEditor's API to do style the content and that is it!","layout":"guide","title":"Create Buttons","weight":1,"content":" If you run the editor with the default UI, which is written in React, then adding a button will be straightforward. Buttons are standard React classes. For your convenience, there is also a number of mixins, which you can use that provide basic functionality out of the box. Then, use CKEditor's API to do style the content and that is it! Creating a Button Example of a new button that converts the current selection into a marquee // Use the built-in version of React if your site does not use React var React = AlloyEditor.React; var ButtonMarquee = React.createClass({ mixins: [AlloyEditor.ButtonStyle, AlloyEditor.ButtonStateClasses, AlloyEditor.ButtonActionStyle], propTypes: { editor: React.PropTypes.object.isRequired }, getDefaultProps: function() { return { style: { element: 'marquee' } }; }, statics: { key: 'marquee' }, render: function() { var cssClass = 'ae-button ' + this.getStateClasses(); return ( ); } }); AlloyEditor.Buttons[ButtonMarquee.key] = AlloyEditor.ButtonMarquee = ButtonMarquee; Using a Button After creating your button, you have to add it to the configuration of the Toolbar where you want to use it. Buttons, which handle styles are usually used within the Styles Toolbar, inside a text-like selection var toolbars = [ styles: { selections: [{ name: 'text', buttons: ['styles', 'bold', 'italic', 'underline', 'link', 'twitter', 'marquee'], test: AlloyEditor.SelectionTest.text }], tabIndex: 1 } ]; In this case the Marquee button will appear after Twitter one, last on the toolbar. ","srcFilePath":"src/pages/docs/develop/create/create_buttons.md","id":"create_buttons","url":"/docs/develop/create/create_buttons.html"},"create_skin":{"description":"AlloyEditor bundles a couple of gorgeus skins that you can use out of the box. However, if you need a better integration with your app's look and feel, you can easily create your own skin.","layout":"guide","title":"Create Skins","weight":2,"content":" AlloyEditor bundles a couple of gorgeus skins that you can use out of the box. However, if you need a better integration with your app's look and feel, you can easily create your own skin. Get ready to build AlloyEditor Follow the instructions in our How to build it guide to know how to change and build AlloyEditor. Create skin folders Create a new directory under src/ui/react/assets/icons/ with the name of your skin (e.g zebra). This directory will contain all the required icons of your skin. Create a new directory under src/ui/react/assets/sass/skin with the name of your skin (e.g zebra). This directory will contain the styling of the skin. Note: You can reuse our own Skin Architecture to simplify the process of creating your own skin! Create your Skin Place all the icons you need inside an svg folder in your skin's icon folder. These icons will be merged with the default ones, and the resulting set will be used to generate your skin icon font Create a file called main.scss inside your skin folder. This will be the entry point of your skin and should contain all the styling of your look and feel. Build the editor Your skin will be automatically picked up when building AlloyEditor: gulp [build] Use your Skin Include your skin to the page instead any of the default ones: That is everything! Now AlloyEditor will appear with a new beautiful look and feel! ","srcFilePath":"src/pages/docs/develop/create/create_skin.md","id":"create_skin","url":"/docs/develop/create/create_skin.html"},"create_toolbars":{"description":"Adding a new toolbar is also as straightforward as adding a button.","layout":"guide","title":"Create Toolbars","weight":3,"content":" Adding a new toolbar is also as straightforward as adding a button. Creating a Toolbar // Use the built-in version of React if your site does not use React var React = AlloyEditor.React; var ToolbarVersions = React.createClass({ mixins: [AlloyEditor.WidgetDropdown, AlloyEditor.WidgetExclusive, AlloyEditor.WidgetFocusManager, AlloyEditor.ToolbarButtons, AlloyEditor.WidgetPosition, AlloyEditor.WidgetArrowBox], statics: { key: 'versions' }, componentDidMount: function () { this._updatePosition(); }, componentDidUpdate: function (prevProps, prevState) { this._updatePosition(); }, getDefaultProps: function() { return { circular: true, descendants: '.ae-button, .ae-toolbar-element', keys: { next: [38, 39], prev: [37, 40] } }; }, /** Returns the class name of the toolbar in case of both exclusive and normal mode. */ _getToolbarClassName: function() { var cssClass = 'ae-toolbar-versions'; if (this.props.renderExclusive) { cssClass = 'ae-toolbar ' + this.getArrowBoxClasses(); } return cssClass; }, /** Calculates and sets the position of the toolbar in exclusive or normal mode. */ _updatePosition: function() { var region; if (this.props.selectionData) { region = this.props.selectionData.region; } if (region) { var domNode = React.findDOMNode(this); var domElement = new CKEDITOR.dom.element(domNode); var startRect = region.startRect || region; var right = this.props.editor.get('nativeEditor').editable().getClientRect().right; domNode.style.right = right + domNode.offsetWidth + this.props.gutterExclusive.left + 'px'; domNode.style.top = region.top - domNode.offsetHeight/2 + startRect.height/2 + 'px'; domNode.style.opacity = 1; domElement.removeClass('ae-arrow-box'); this.cancelAnimation(); } }, /** Lifecycle. Renders the buttons for managing version changes. */ render: function() { var buttons = this.getToolbarButtons(this.props.config.buttons); var className = this._getToolbarClassName(); return ( {buttons} ); } }); AlloyEditor.Toolbars[ToolbarVersions.key] = AlloyEditor.ToolbarVersions = ToolbarVersions; Using a Toolbar After creating your toolbar, you have to add it to the configuration of the editor where you want to use it. var toolbars = { add: { buttons: ['image', 'camera', 'hline', 'table'], tabIndex: 2 }, versions: { buttons: ['annotate', 'comment', 'acceptChanges', 'rejectChanges'], tabIndex: 1 } } In this example, annotate, comment, acceptChanges and rejectChanges will be the buttons that will be loaded on the toolbar, and that will help us handle document version changes. Read our Create Buttons Guide to know how to do this! ","srcFilePath":"src/pages/docs/develop/create/create_toolbars.md","id":"create_toolbars","url":"/docs/develop/create/create_toolbars.html"},"create_ui":{"description":"You don't like React? You prefer jQuery? Or you are JavaScript ninja and prefer writing vanilla JS? Welcome on board. You'll see how straightforward it is to create a whole new UI for AlloyEditor.","layout":"guide","title":"Create entirely new UI","weight":4,"content":" You don't like React? You prefer jQuery? Or you are JavaScript ninja and prefer writing vanilla JS? Welcome on board. You'll see how straightforward it is to create a whole new UI for AlloyEditor. Get ready to build AlloyEditor Follow the instructions in our How to build it Guide to know how to change and build AlloyEditor. Create UI folder Create a new directory under src/ui with the name of your UI (e.g jquery) Create Build Create a subfolder, called gulp-tasks and a build.js file with your custom build steps. You can check out the Gulp Project or some of the existing tasks for extra insight into the build system. Build your UI In order to build AlloyEditor using your brand new UI (jquery), run gulp --ui jquery That is everything. How will you structure the directories, which modules will you use, will you load Buttons and Toolbars on demand, what gulp tasks will you add - these questions are entirely up to you. The good news is that you won't start from scratch entirely. You still will be able to use the core of AlloyEditor, as well as the API from CKEditor. Once you are ready with the UI, please send us a pull request and we will merge it! ","srcFilePath":"src/pages/docs/develop/create/create_ui.md","id":"create_ui","url":"/docs/develop/create/create_ui.html"}},"description":"How to create your buttons, skins, toolbars and UI!","layout":"guide","title":"Create","weight":2,"content":" How to create your buttons, skins, toolbars and UI! Create Buttons If you run the editor with the default UI, which is written in React, then adding a button will be straightforward. Buttons are standard React classes. For your convenience, there is also a number of mixins, which you can use that provide basic functionality out of the box. Then, use CKEditor's API to do style the content and that is it! Please, check our Create Buttons Guide! Create Skins AlloyEditor bundles a couple of gorgeus skins that you can use out of the box. However, if you need a better integration with your app's look and feel, you can easily create your own skin. Please, check our Create Skins Guide! Create Toolbars Adding a new toolbar is also as straightforward as adding a button. Please, check our Create Toolbars Guide! Create UI You don't like React? You prefer jQuery? Or you are JavaScript ninja and prefer writing vanilla JS? Welcome on board. You'll see how straightforward it is to create a whole new UI for AlloyEditor. Please, check our Create Toolbars Guide! ","srcFilePath":"src/pages/docs/develop/create/index.md","id":"create","url":"/docs/develop/create","childIds":["create_buttons","create_skin","create_toolbars","create_ui"]}},"description":"The main idea behind the editor is to fully separate the core from the UI. And not only to separate it, but to give opportunity to people to add very easy new Buttons and Toolbars or to create completely new UI, based on different Framework or vanilla JavaScript.","icon":"code-file","layout":"guide","title":"Develop","weight":1,"content":" The main idea behind the editor is to fully separate the core from the UI. And not only to separate it, but to give opportunity to people to add very easy new Buttons and Toolbars or to create completely new UI, based on different Framework or vanilla JavaScript. Architecture Core Built on top of CKEditor AlloyEditor uses CKEditor under the hood to deal with the HTML. Browsers still generate very inconsistent HTML, not to mention how buggy they are. In fact, to create an editor, which is able to handle all browsers, let's say IE9+, Chrome, Firefox and Safari, is very challenging. Fortunately, CKEditor does it well, so it was the natural choice not only because of that, but because it is mature, well documented and configurable. Not everything from CKEditor is being used. In fact, AlloyEditor uses only the core from it. The whole UI has been discarded and the version of CKEditor which comes in AlloyEditor is twice smaller than the version OOTB. Plugins and UI Core On top of what CKEditor provides, new plugins and modules were created, which form the core of AlloyEditor. Among these plugins is a plugin, which adds new functions which provide information about the selection - its regions, direction and so on. This is the key part and that is what allows the Toolbars to display themselves just above or below the selection. Other plugins are related to Drag&Drop of images directly in the editor, or they provide common API for creating, editing and removing links and so on. There is no much dependency of CKEditor in AlloyEditor. If there is better base, or if we reach the point when creation of new core would be easier but we still will be able to support the majority of the browsers, nothing prevents us of replacing CKEditor core with our own. UI The UI has been thought in the way that it should provide the following functionality: Toolbars should allow adding, removing and reordering Buttons. The developer should be able to add new Toolbars to the editor. It should be easy to create a new UI. The default one uses React. However, if a developer wants to use another Framework or to create UI using vanilla JavaScript and CSS - that should be possible. Currently AlloyEditor supports only one UI - it uses React. Please feel free to contact us if you want to contribute another UI. ","srcFilePath":"src/pages/docs/develop/index.md","id":"develop","url":"/docs/develop","childIds":["how_to_build_it","create"]},"use":{"children":{"button_configuration":{"description":"Changing the default configuration of the buttons is possible by passing configuration attributes to them and it will affect only the button behavior, without affecting their position in the Toolbars. Both configuring the Toolbars and the buttons can be used giving maximum flexibility.","layout":"guide","title":"Button configuration","weight":7,"content":" Changing the default configuration of the buttons is possible by passing configuration attributes to them and it will affect only the button behavior, without affecting their position in the Toolbars. Both configuring the Toolbars and the buttons can be used giving maximum flexibility. Passing configuration options to the buttons The buttons are configured via a common buttonCfg property, like this: var editor = AlloyEditor.editable('editable', { buttonCfg: { bold: { tabIndex: 1 } } }); The buttonCfg is the property which contains the configurations for the different buttons. In this example, bold is the name of the button, which has to be configured and tabIndex is the property with the new value of 1 (by default 0). Each button has a static property key which value is the button name as should be passed to the configuration. ","srcFilePath":"src/pages/docs/use/button_configuration.md","id":"button_configuration","url":"/docs/use/button_configuration.html"},"editor_configuration":{"description":"AlloyEditor allows you to configure the editor in the way you prefer. You will be able to custom Toolbars, Buttons and Editor behavior!","layout":"guide","title":"Editor Configuration","weight":5,"content":" AlloyEditor allows you to configure the editor in the way you prefer. You will be able to custom Toolbars, Buttons and Editor behavior! Toolbar Configuration AlloyEditor allows you to configure the Toolbars in the way you prefer. You will be able to remove some of the existing Toolbars, to add your own or to reorder the buttons in each Toolbar Please, check our Toolbar Configuration! Button Configuration Changing the default configuration of the buttons is possible by passing configuration attributes to them and it will affect only the button behavior, without affecting their position in the Toolbars. Both configuring the Toolbars and the buttons can be used giving maximum flexibility. Please, check our Button Configuration! ReadOnly Configuration Changing editor´s behavior. ReadOnly is a property that it allows you enable or disable AlloyEditor. Please, check our ReadOnly Configuration! ","srcFilePath":"src/pages/docs/use/editor_configuration.md","id":"editor_configuration","url":"/docs/use/editor_configuration.html"},"hot_to_use_it":{"description":"The section below assumes that you are using the default UI, which is built using React. The AlloyEditor core is fully separated from the UI and creating another one based on any other framework is very easy.","layout":"guide","title":"How to use it?","weight":2,"content":" The section below assumes that you are using the default UI, which is built using React. The AlloyEditor core is fully separated from the UI and creating another one based on any other framework is very easy. Add AlloyEditor's CSS to the page Add AlloyEditor's JS to the page There are a few ways to add the editor to the page: Add the whole editor with all UI on the page Add it on the page separating the CKEditor code from AlloyEditor. This is useful if in your project you already use CKEditor. Add it on the page separating the React code from AlloyEditor. This is useful if you already use React in your project. If you use both React and CKEditor on your page, then just include AlloyEditor's core Invoke the static editable method of AlloyEditor AlloyEditor.editable('myContentEditable'); Retrieve the content from the editor var alloyEditor = AlloyEditor.editable('myContentEditable'); var content = alloyEditor.get('nativeEditor').getData(); ","srcFilePath":"src/pages/docs/use/hot_to_use_it.md","id":"hot_to_use_it","url":"/docs/use/hot_to_use_it.html"},"react_component":{"description":"AlloyEditor can be used on the server too. On the server, a possible way of usage is to create a React component, which can render the content for editing and create an instance of AlloyEditor in the browser. This will be a significant performance improvement.","layout":"guide","title":"Creating a React component","weight":3,"content":" AlloyEditor can be used on the server too. On the server, a possible way of usage is to create a React component, which can render the content for editing and create an instance of AlloyEditor in the browser. This will be a significant performance improvement. Talking is cheap, show me the code (to quote Linus Torvalds) Instead just explaining how to do it, we actually created an example repository on GitHub, which contains code and instructions for usage. Please follow the instructions there. The repository is an example project, which renders a page on the server an creates an instance of AlloyEditor in the browser. Same React component is used on both client and server and one cool thing is that instead to create just one bundle file, two bundles are created - one for the application files and another one for AlloyEditor file itself. In this case you will leverage browser's cache. ","srcFilePath":"src/pages/docs/use/react_component.md","id":"react_component","url":"/docs/use/react_component.html"},"readonly_configuration":{"description":"AlloyEditor might be set to work in \"read only\" mode. In read only mode, changing the content will be not possible and clicking on a link will navigate to its URL instead to open a dialog for editing it.","layout":"guide","title":"Read only mode","weight":8,"content":" AlloyEditor might be set to work in \"read only\" mode. In read only mode, changing the content will be not possible and clicking on a link will navigate to its URL instead to open a dialog for editing it. Passing \"readOnly\" configuration property to the editor The read only mode can be set by passing the readOnly property to the editor with value true: var editor = AlloyEditor.editable('editable', { readOnly: true }); The value of the readOnly property might be true or false. If set to true this means changes to the content won't be possible and clicking on a link will navigate to its URL instead to open a dialog for changing it. This behavior might be changed any time using the following code: var nativeEditor = editor.get('nativeEditor'); nativeEditor.setReadOnly(false); This will make the content editable again. ","srcFilePath":"src/pages/docs/use/readonly_configuration.md","id":"readonly_configuration","url":"/docs/use/readonly_configuration.html"},"skin":{"description":"Skins in AlloyEditor are a very powerful feature that allows you to seamlessly integrate the editor inside your app.","layout":"guide","title":"Skins","weight":9,"content":" Skins in AlloyEditor are a very powerful feature that allows you to seamlessly integrate the editor inside your app. Skin Architecture AlloyEditor skins are organized according to the following principles: Variables Style values are parameterized as much as possible. This allows skins to fully extend others just by changing a small set of variable values. Components A skin is created by combining one or more components together. Different skins may use different components, so irrelevant styling can be easily stripped out. Structure vs Skin All styling is separated into structure and skin. Structure represents everything that affects the sizing and position of the elements. Meanwhile, skin represents all the purely cosmetic changes. Skins Overview At this moment, you can use any of the following skins out of the box: Ocean (default) Atlas Moono ","srcFilePath":"src/pages/docs/use/skin.md","id":"skin","url":"/docs/use/skin.html"},"toolbar_configuration":{"description":"AlloyEditor allows you to configure the Toolbars in the way you prefer. You will be able to remove some of the existing Toolbars, to add your own or to reorder the buttons in each Toolbar","title":"Toolbar configuration","layout":"guide","weight":6,"content":" AlloyEditor allows you to configure the Toolbars in the way you prefer. You will be able to remove some of the existing Toolbars, to add your own or to reorder the buttons in each Toolbar Default Configuration This is the default editor toolbars configuration var toolbars = { add: { buttons: ['image', 'camera', 'hline', 'table'], tabIndex: 2 }, styles: { selections: AlloyEditor.Selections, tabIndex: 1 } }; where AlloyEditor.Selections is var Selections = [{ name: 'link', buttons: ['linkEdit'], test: AlloyEditor.SelectionTest.link }, { name: 'image', buttons: ['imageLeft', 'imageRight'], test: AlloyEditor.SelectionTest.image }, { name: 'text', buttons: ['styles', 'bold', 'italic', 'underline', 'link', 'twitter'], test: AlloyEditor.SelectionTest.text }, { name: 'table', buttons: ['tableRow', 'tableColumn', 'tableCell', 'tableRemove'], getArrowBoxClasses: AlloyEditor.SelectionGetArrowBoxClasses.table, setPosition: AlloyEditor.SelectionSetPosition.table, test: AlloyEditor.SelectionTest.table }]; The configuration above represents two toolbars - for adding content (images, code, etc.) and modify content based on the current selection type. You may remove any of those and the toolbar won't be shown when user makes the corresponding selection. To remove the toolbar for adding content, just remove the property add var toolbars = { styles: { selections: AlloyEditor.Selections, tabIndex: 1 } }; Configuring Buttons In the default UI, which uses React, some of the buttons accept configuration parameters so you can tailor them to suit your needs. Here is an example of a custom configuration for the Styles button inside a text selection var Selections = [{ name: 'text', buttons: [ { name: 'styles', cfg: { styles: [...] } }, 'bold', 'italic', 'underline', 'link', 'twitter' ], test: AlloyEditor.SelectionTest.text }]; In this case a different array of styles is passed to the Styles button, so they will be shown when user selects a text instead of the default ones. Reordering Buttons If you are not happy with the order of the buttons, you can just reorder them in the toolbar configuration. They will follow the order in which you specify them. For example, if you want the table button to appear before the hline button in the Add toolbar, you just need to do the following: var toolbars = { add: { buttons: ['table', 'hline', image', 'camera'], tabIndex: 2 } }; If you remove a button from the buttons property of a toolbar, or from the selections in Styles toolbar, then this button won't be available when the toolbar gets visible. ","srcFilePath":"src/pages/docs/use/toolbar_configuration.md","id":"toolbar_configuration","url":"/docs/use/toolbar_configuration.html"},"use_ckeditor_plugins":{"description":"Is there an existing CKEditor plugin you like? Chances are you will be able to use it with AlloyEditor as well!","layout":"guide","title":"How to use CKEditor Plugins?","weight":3,"content":" There are some CKEDITOR plugins that it add button through their UI. This tutorial is about using this kind of plugins. Example to use 'font' Plugin You can download font plugin and, after that, you can paste it into plugins folder Note: Keep in mind, if this plugin has dependencies, we need to download and to configure them too. Configuration AlloyEditor Our UI bridges allow us to use CKEDITOR plugin easier, you only need to add appropriates plugins to extraPlugins configuration and to retrieve its buttons using AlloyEditor.getButtons(['PLUGINNAME', MOREBUTTONS]) AlloyEditor.editable('MyEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',font', toolbars: { styles: { selections: [ { name: 'text', buttons: AlloyEditor.getButtons(['font']), //['FontFamily', 'FontSize'] test: AlloyEditor.SelectionTest.text } ] } } } ); If you want to customize and to add other buttons to text selections you can add them like this: buttons: AlloyEditor.getButtons(['font', 'bold', 'italic', ...]), Or if you prefer to keep previous buttons you can do: var selections = AlloyEditor.Selections; var textButtons = selections[3].buttons; // ['styles', 'bold, 'italic', 'underline', 'link', twitter'] var customButtons = textButtons.concat('font'); // ['styles', 'bold, 'italic', 'underline', 'link', twitter', 'FontFamily', 'FontSize'] selections[3].buttons = AlloyEditor.getButtons(customButtons); AlloyEditor.editable('MyEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',font' } ); Use moono skin for visual compatibility AlloyEditor's UI Bridge is in its early stages, so there are still some uncovered areas. For example, dialogs are not converted and will still appear with CKEditor's default look and feel. Use the new moono skin to close the gap between AlloyEditor default look and feel and CKEditor's. ","srcFilePath":"src/pages/docs/use/use_ckeditor_plugins.md","id":"use_ckeditor_plugins","url":"/docs/use/use_ckeditor_plugins.html"}},"description":"Develop description.","icon":"code-file","layout":"guide","title":"Use","weight":1,"content":" The section below assumes that you are using the default UI, which is built using React. The AlloyEditor core is fully separated from the UI and creating another one based on any other framework is very easy. Download AlloyEditor Option 1) Download AlloyEditor from here, then unzip it. Option 2) Install AlloyEditor via Bower (bower install alloyeditor) Option 3) Install AlloyEditor via NPM (npm install alloyeditor) Copy and Paste If you downloaded the zip file: If you downloaded it via Bower: Use AlloyEditor Invoke the editable static method on AlloyEditor passing the ID of the node you want to edit AlloyEditor.editable('myContentEditable'); And that is everything you need to get started! ","srcFilePath":"src/pages/docs/use/index.md","id":"use","url":"/docs/use","childIds":["hot_to_use_it","react_component","use_ckeditor_plugins","editor_configuration","toolbar_configuration","button_configuration","readonly_configuration","skin"]},"features":{"children":{"bold":{"description":"Use this button to highlight important content.","layout":"feature","title":"Bold","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['bold'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/bold.md","id":"bold","url":"/docs/features/bold.html"},"camera":{"description":"Let others see you! You can use this button to take pictures from your device and directly attach them to your document.","layout":"feature","title":"Camera","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { add: { buttons: ['camera'] } } }); `","srcFilePath":"src/pages/docs/features/camera.md","id":"camera","url":"/docs/features/camera.html"},"code":{"description":"Keep your inner geek happy using this button to show preformatted text.","layout":"feature","title":"Code","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['code'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/code.md","id":"code","url":"/docs/features/code.html"},"hline":{"description":"Create a horizontal line with this button.","layout":"feature","title":"Horizontal Line","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { add: { buttons: ['hline'] } } }); `","srcFilePath":"src/pages/docs/features/hline.md","id":"hline","url":"/docs/features/hline.html"},"hone":{"description":"Got any important text? Turn it into a big header with this button!","layout":"feature","title":"Heading 1","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['h1'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/hone.md","id":"hone","url":"/docs/features/hone.html"},"htwo":{"description":"For that not-so-important content, use this button to turn text into a 2nd level heading.","layout":"feature","title":"Heading 2","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['h2'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/htwo.md","id":"htwo","url":"/docs/features/htwo.html"},"image":{"description":"Got pictures to share? Use this button to browse your device and attach awesome images to your document.","layout":"feature","title":"Image","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { add: { buttons: ['image'] } } }); `","srcFilePath":"src/pages/docs/features/image.md","id":"image","url":"/docs/features/image.html"},"imagealigncenter":{"description":"Use this button if you need to center an image.","layout":"feature","title":"Image Alignment - Center","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'image', buttons: ['imageCenter'], test: AlloyEditor.SelectionTest.image } ] } } }); `","srcFilePath":"src/pages/docs/features/imagealigncenter.md","id":"imagealigncenter","url":"/docs/features/imagealigncenter.html"},"imagealignleft":{"description":"Use this button if you need to align an image to the left on the text.","layout":"feature","title":"Image Alignment - Left","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'image', buttons: ['imageLeft'], test: AlloyEditor.SelectionTest.image } ] } } }); `","srcFilePath":"src/pages/docs/features/imagealignleft.md","id":"imagealignleft","url":"/docs/features/imagealignleft.html"},"imagealignright":{"description":"Use this button if you need to align an image to the right on the text.","layout":"feature","title":"Image Alignment - Right","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'image', buttons: ['imageRight'], test: AlloyEditor.SelectionTest.image } ] } } }); `","srcFilePath":"src/pages/docs/features/imagealignright.md","id":"imagealignright","url":"/docs/features/imagealignright.html"},"indent-outdent":{"description":"Wondering how to indent and outdent a block of content? There are two buttons for that purpose, just include them to the text configuration and enjoy!","layout":"feature","title":"Indent and outdent block content","content":" var editor = AlloyEditor.editable('editable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['indentBlock', 'outdentBlock'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/indent-outdent.md","id":"indent-outdent","url":"/docs/features/indent-outdent.html"},"italic":{"intro":"Use this button to emphasize an important content.","layout":"feature","title":"Italic","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['italic'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/italic.md","id":"italic","url":"/docs/features/italic.html"},"link":{"intro":"Use this button to highlight an important content.","layout":"feature","title":"Link","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'link', buttons: ['linkEdit'], test: AlloyEditor.SelectionTest.link } ] } } }); `","srcFilePath":"src/pages/docs/features/link.md","id":"link","url":"/docs/features/link.html"},"linkautocomplete":{"description":"Add a link using autocomplete.","layout":"feature","title":"Link AutoComplete","content":" var editor = AlloyEditor.editable('editable', { buttonCfg: { 'linkEdit': { data: function(term) { return new Promise(function(resolve, reject) { // Send request to the server and based on the term // resolve the Promise with an array of items // in the following format: // [{title: 'Item1', url: 'http://liferay.com'}] }); } } } }); `","srcFilePath":"src/pages/docs/features/linkautocomplete.md","id":"linkautocomplete","url":"/docs/features/linkautocomplete.html"},"ol":{"description":"Need an ordered list? Easily turn paragraphs into list items with this button.","layout":"feature","title":"Lists (Numbered)","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['ol'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/ol.md","id":"ol","url":"/docs/features/ol.html"},"paragraphaligncenter":{"description":"For those headers or footers of yours... use this button to center them in the document.","layout":"feature","title":"Text Alignment - Centered","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['paragraphCenter'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/paragraphaligncenter.md","id":"paragraphaligncenter","url":"/docs/features/paragraphaligncenter.html"},"paragraphalignjustify":{"description":"Do you hate mismatching lines? Use this button to justify your text content!","layout":"feature","title":"Text Alignment - Justified","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['paragraphJustify'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/paragraphalignjustify.md","id":"paragraphalignjustify","url":"/docs/features/paragraphalignjustify.html"},"paragraphalignleft":{"description":"For the vintage writers out there, this button gives you left text alignment... as it should be.","layout":"feature","title":"Text Alignment - Left","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['paragraphLeft'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/paragraphalignleft.md","id":"paragraphalignleft","url":"/docs/features/paragraphalignleft.html"},"paragraphalignright":{"description":"Are you feeling adventurous? Or is that an address you want to show? Align any text you want to the right with this button!","layout":"feature","title":"Text Alignment - Right","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['paragraphRight'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/paragraphalignright.md","id":"paragraphalignright","url":"/docs/features/paragraphalignright.html"},"quote":{"description":"Give credit to other authors by properly quoting their words with this button.","layout":"feature","title":"Quote","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['quote'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/quote.md","id":"quote","url":"/docs/features/quote.html"},"removeformat":{"description":"If you're a minimalist, you can use this button to strip any styling from your content","layout":"feature","title":"Remove Format","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['removeFormat'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/removeformat.md","id":"removeformat","url":"/docs/features/removeformat.html"},"strike":{"description":"Strike through those small judgement lapses with this button!","layout":"feature","title":"Strike","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['strike'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/strike.md","id":"strike","url":"/docs/features/strike.html"},"styles":{"description":"Use this button to highlight important content.","layout":"feature","title":"Styles","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: [{ name: 'styles', cfg: { styles: [ { name: 'Head 1', style: { element: 'h1' } }, { name: 'Head 2', style: { element: 'h2' } }, { name: 'Big', style: { element: 'big' } }, { name: 'Small', style: { element: 'small' } }, { name: 'Code', style: { element: 'code' } } ] } }], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/styles.md","id":"styles","url":"/docs/features/styles.html"},"subscript":{"description":"You ought to be a chemist if you need this button to specify the number of atoms in a chemical formula!","layout":"feature","title":"Subscript","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['subscript'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/subscript.md","id":"subscript","url":"/docs/features/subscript.html"},"superscript":{"description":"You're probably a mathematician eager to exponentiate a base if you need this button.","layout":"feature","title":"Superscript","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['superscript'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/superscript.md","id":"superscript","url":"/docs/features/superscript.html"},"table":{"description":"For the data-driven out there. Use this button to create tables in the blink of an eye!","layout":"feature","title":"Table","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { add: { buttons: ['table'] } } }); `","srcFilePath":"src/pages/docs/features/table.md","id":"table","url":"/docs/features/table.html"},"tablecell":{"description":"Use this button to work with table cells (add, remove, merge, split...).","layout":"feature","title":"Table - Cells","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'table', buttons: ['tableCell'], test: AlloyEditor.SelectionTest.table } ] } } }); `","srcFilePath":"src/pages/docs/features/tablecell.md","id":"tablecell","url":"/docs/features/tablecell.html"},"tablecolumn":{"description":"Easily add and remove columns inside a table with this button.","layout":"feature","title":"Table - Columns","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'table', buttons: ['tableColumn'], test: AlloyEditor.SelectionTest.table } ] } } }); `","srcFilePath":"src/pages/docs/features/tablecolumn.md","id":"tablecolumn","url":"/docs/features/tablecolumn.html"},"tableheading":{"description":"Give structure and meaning to your data using the proper heading style.","layout":"feature","title":"Table - Heading","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'table', buttons: ['tableHeading'], test: AlloyEditor.SelectionTest.table } ] } } }); `","srcFilePath":"src/pages/docs/features/tableheading.md","id":"tableheading","url":"/docs/features/tableheading.html"},"tableremove":{"description":"No longer need this table? Get rid of it with this button in just one click!","layout":"feature","title":"Table - Remove","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'table', buttons: ['tableRemove'], test: AlloyEditor.SelectionTest.table } ] } } }); `","srcFilePath":"src/pages/docs/features/tableremove.md","id":"tableremove","url":"/docs/features/tableremove.html"},"tablerow":{"description":"Easily add and remove rows inside a table with this button.","layout":"feature","title":"Table - Rows","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'table', buttons: ['tableRow'], test: AlloyEditor.SelectionTest.table } ] } } }); `","srcFilePath":"src/pages/docs/features/tablerow.md","id":"tablerow","url":"/docs/features/tablerow.html"},"twitter":{"description":"Did you just write the latest Trending Topic? You can use this button to allow your readers to share your thoughts via Twitter.","layout":"feature","title":"Twitter","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: [{ name: 'twitter', cfg: { url: 'www.alloyeditor.com/features/twitter', via: '@alloyeditor' } }], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/twitter.md","id":"twitter","url":"/docs/features/twitter.html"},"ul":{"description":"Use this button to turn paragraphs into unordered list items.","layout":"feature","title":"Lists (Bulleted)","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['ul'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/ul.md","id":"ul","url":"/docs/features/ul.html"},"underline":{"description":"Use this button to underline the important content.","layout":"feature","title":"Underline","content":" var editor = AlloyEditor.editable('myContentEditable', { toolbars: { styles: { selections: [ { name: 'text', buttons: ['underline'], test: AlloyEditor.SelectionTest.text } ] } } }); `","srcFilePath":"src/pages/docs/features/underline.md","id":"underline","url":"/docs/features/underline.html"}},"description":"List of features that AlloyEditor has.","layout":"feature","title":"Features","icon":"code-file","weight":3,"content":"","srcFilePath":"src/pages/docs/features/index.md","id":"features","url":"/docs/features","childIds":["bold","camera","code","hone","htwo","hline","image","imagealigncenter","imagealignleft","imagealignright","indent-outdent","italic","link","linkautocomplete","ul","ol","quote","removeformat","strike","styles","subscript","superscript","table","tablecell","tablecolumn","tableheading","tableremove","tablerow","paragraphaligncenter","paragraphalignjustify","paragraphalignleft","paragraphalignright","twitter","underline"]}},"childIds":["develop","use","features","search"]},"updates":{"title":"Updates","description":"Updates description.","updates":[{"version":"1.4.1","major":false,"features":[{"icon":"command-line","title":"Bridge Plugins enabled by default","description":"AlloyEditor Bridge plugins that allow you to use CKEditor plugins are now enabled by default","url":"https://github.com/liferay/alloy-editor/issues/731"},{"icon":"hammer","title":"Fixed several issues","description":"Fixed some issues related to languages and focus selection","url":"https://github.com/liferay/alloy-editor/issues?utf8=%E2%9C%93&q=milestone%3A1.4.1"}]},{"version":"1.4.0","major":true,"features":[{"icon":"command-line","title":"New getButtons API","description":"Added a `getButtons` method to easily discover available buttons!","url":"https://github.com/liferay/alloy-editor/issues/667"},{"icon":"hammer","title":"Fixed several bug","description":"Fixed many bug to improve general stability","url":"https://github.com/liferay/alloy-editor/issues?utf8=%E2%9C%93&q=milestone%3A1.4.0"}]},{"version":"1.3.1","major":false,"features":[{"icon":"hammer","title":"Performance in large documents","description":"Fixed a bug degrading performance in large documents","url":"https://github.com/liferay/alloy-editor/issues/654"},{"icon":"hammer","title":"Autolink for urls with '-'","description":"Fixed the autolink plugin to work with urls containing a '-' character","url":"https://github.com/liferay/alloy-editor/issues/657"},{"icon":"hammer","title":"Imposible to enter URL in IE","description":"Fixed an issue that was preventing to set the URL when editing a link in IE","url":"https://github.com/liferay/alloy-editor/issues/660"}]},{"version":"1.3.0","major":true,"features":[{"icon":"command-line","title":"Supports Edge","description":"AlloyEditor now officially supports Microsoft Edge."},{"icon":"module","title":"CKEditor was updated to v4.6.0","description":"CKEditor engine has been updated to v4.6.0.","url":"https://github.com/liferay/alloy-editor/issues/631"},{"icon":"module","title":"Additional CKEditor Plugin Support","description":"You can now use CKEditor's plugins using the MenuButton API such as SpellChecker and Language!","url":"/docs/use/use_ckeditor_plugins.html"},{"icon":"groups","title":"Open links in new tab","description":"You can now use Ctrl/Cmd + Click to open links inside AlloyEditor in a new tab!","url":"https://github.com/liferay/alloy-editor/issues/509"},{"icon":"hammer","title":"Bug Fixes","description":"Addressed several bug fixes related to image resizing, missing translations, url edition and placeholder state among others.","url":"https://github.com/liferay/alloy-editor/issues?utf8=%E2%9C%93&q=milestone%3A1.3.0"}]},{"version":"1.2.5","major":false,"features":[{"icon":"command-line","title":"Configurable resize behaviour","description":"The dragresize plugin can now be configured using the `imageScaleResize` attribute to define how the image attributes should change when resizing it. This will also affect which resize handles are available depending on the configuration.","url":"https://github.com/liferay/alloy-editor/issues/601"},{"icon":"hammer","title":"Bug fixes","description":"Fixed a bug with the Placeholder plugin that caused it to show the placeholder helper for a brief period of time even if the editor contained data.","url":"https://github.com/liferay/alloy-editor/issues/603"},{"icon":"command-line","title":"Configurable LinkEditButton","description":"The `LinkEditButton` accepts now an option (`showTargetSelector`) to configure if the link target selector dropdown should appear or not.","url":"https://github.com/liferay/alloy-editor/issues/608"}]},{"version":"1.2.4","major":false,"features":[{"icon":"hammer","title":"Bugfixes and enhancements","description":"Various bugfixes and enhancements: Fixed toolbar rendering issues, button style documentation, images resizing in Firefox, passing link targets button config ButtonTargetList.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.2.4+label%3Abug"}]},{"major":false,"version":"1.2.3","features":[{"icon":"hammer","title":"Properly release resources","description":"Fixed issue with detaching events registered via CKEditor's API. The issue would cause the following exception on destroying the editor \"Uncaught TypeError Cannot read property 'getRanges' of null\". Fixed an issue that would cause the image resize markers to be still present even when the editor was destroyed.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.2.3+label%3Abug"},{"icon":"command-line","title":"Fire `beforeImageAdd` event in buttom-image too","description":"ButtonImage will fire `beforeImageAdd` event too","url":"https://github.com/liferay/alloy-editor/issues/534"}]},{"major":false,"version":"1.2.2","features":[{"icon":"hammer","title":"Properly position embedded media toolbar","description":"If page is scrolled, the embedded media toolbar will be positioned improperly. To fix that, scrollTop and scrollLeft properties were involved in toobar's position calculation.","url":"https://github.com/liferay/alloy-editor/issues/526"}]},{"major":false,"version":"1.2.1","features":[{"icon":"hammer","title":"Improve embedding media","description":"Embedding media has been improved and now it allows removal of the widgets using the keyboard. In addition, a new button has been added, which allows trashing embedded content.","url":"https://github.com/liferay/alloy-editor/issues/517"},{"icon":"module","title":"CKEditor was updated to v4.5.9","description":"CKEditor was updated to v4.5.9 and a bug, which was preventing the usage of CKEditor buttons in multiple AlloyEditor instances was fixed.","url":"https://github.com/liferay/alloy-editor/issues/515"},{"icon":"groups","title":"Convert mail link","description":"The button for adding link has been improved and now it recognizes mail links. Entering `me@example.com` will be converted to  `mailto:me@example.com`. Thanks to Matthew Leffler for his awesome contribution!","url":"https://github.com/liferay/alloy-editor/issues/522"},{"icon":"command-line","title":"Adding images fires `beforeImageAdd` event","description":"On adding images via paste or Drag&amp;Drop, before to append the image to the content, a `beforeImageAdd` event will be fired. The developer may subscribe to it and cancel it, this will prevent adding the image to the content.","url":"https://github.com/liferay/alloy-editor/issues/518"}]},{"major":true,"version":"1.2.0","features":[{"icon":"groups","title":"New buttons and plugins","description":"Added two new buttons - \"indent\" and \"outdent\". Added a plugin to create automatically ordered and unordered lists.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.2.0+label%3A%22Feature+request%22"},{"icon":"accessibility","title":"Accessibility and UX improvements","description":"Added support for keyboard navigation in link autocomplete. Table removing icon was changed.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.2.0+label%3Aenhancement"}]},{"major":true,"version":"1.1.0","features":[{"icon":"command-line","title":"A new way for configuring the buttons","description":"A single button can be configured without the requirement the whole toolbars configuration to be overwritten too. For that purpose, there is a new configuration property, called 'buttonCfg'.","url":"/docs/guides/button_configuration/"},{"icon":"groups","title":"Adding links via AutoComplete","description":"The user is now able to add links using AutoComplete. This feature was contributed by Matthew Leffler.","url":"/docs/features/linkautocomplete/"},{"icon":"hammer","title":"Fixed numerous bug","description":"A number of bug have been fixed, most of them related to the usability of the editor.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.1.0+label%3Abug"}]},{"major":true,"version":"1.0.0","features":[{"icon":"command-line","title":"The API reached a stable version","description":"After almost two years of releasing versions below 1.0, the moment for releasing a stable version of the API has arrived. Since v.1.0.0 the established ways of communicating with CKEditor's engine, emitting events and receiving properties will be locked. Version 1.0 guarantees stability and full backward compatibility in all further 1.x releases."},{"icon":"groups","title":"A new button for embedding media","description":"AlloyEditor is now able to embed media files such as videos, tweets and presentations and many others. The service is provided by IFramely, which means you will be able to embed content for huge set of domains. Please refer to their page for more information and terms of usage.","url":"https://github.com/liferay/alloy-editor/issues/233"},{"icon":"accessibility","title":"Cmd-L opens the Link Dialog","description":"Adding a link is now possible directly from the keyboard by pressing Cmd-L (or Ctrl-L in Windows).","url":"https://github.com/liferay/alloy-editor/issues/417"},{"icon":"hammer","title":"Fixed numerous bug","description":"A number of bug have been fixed, most of them related to the usability of the editor.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.0.0+label%3Abug"}]},{"version":"0.7.5","features":[{"icon":"hammer","title":"Bug Fixes","description":"Properly updated bower package with AlloyEditor version.","url":"https://github.com/liferay/alloy-editor/issues/413"}]},{"version":"0.7.4","features":[{"icon":"hammer","title":"Bug Fixes","description":"Fixed an issue with detecting user language. Replaced `minify-css` package (it has been deprecated) with `cssnano`.","url":"https://github.com/liferay/alloy-editor/issues/410"}]},{"version":"0.7.3","features":[{"icon":"hammer","title":"Bug Fixes","description":"Fixed an issue with requiring AlloyEditor on the server. On the server, when requiring `alloyeditor`, the default script will be now `alloy-editor-no-react.js`.","url":"https://github.com/liferay/alloy-editor/issues/408"},{"icon":"command-line","title":"Guide","description":"Created a guide, which shows how to create a React component and render the content on the server and to create an instance of AlloyEditor in the browser.","url":"http://alloyeditor.com/guides/react_component"}]},{"version":"0.7.2","features":[{"icon":"hammer","title":"Bug Fixes","description":"If React is not defined on the global space, AlloyEditor will try to require it via the `require` function.","url":"https://github.com/liferay/alloy-editor/issues/406"}]},{"version":"0.7.1","features":[{"icon":"groups","title":"Link creating button is now able to set link target","description":"When user creates or edits a link, now there is a possibility to set link's target (blank, self, etc)","url":"https://github.com/liferay/alloy-editor/issues/344"},{"icon":"groups","title":"Link creating button advances the cursor after the created link","description":"After creating a link, the cursor will be advanced after the link. This provides better UX.","url":"https://github.com/liferay/alloy-editor/issues/128"},{"icon":"module","title":"Updated to CKEditor's engine 4.5.5","description":"CKEDIOR's engine has been updated to 4.5.5, which fixes an issue with destroying CKEDITOR's instance immediately after creation.","url":"https://github.com/liferay/alloy-editor/issues/375"},{"icon":"hammer","title":"Bug Fixes","description":"Fixed an issue with destroying the instance of the editor too early, fixed an issue with initializing AlloyEditor's plugins when CKEditor's are present","url":"https://github.com/liferay/alloy-editor/issues/375"},{"icon":"command-line","title":"New autolinkAdd event","description":"A new event, called autolinkAdd will be fired when AlloyEditor creates a link automatically","url":"https://github.com/liferay/alloy-editor/issues/388"},{"icon":"command-line","title":"YUI's UI removed","description":"In this version the old YUI UI has been completely removed.","url":"https://github.com/liferay/alloy-editor/issues/247"}]},{"major":true,"version":"0.7.0","features":[{"icon":"command-line","title":"Supports React 0.14","description":"AlloyEditor has been updated to support React 0.14 and the separation between React and ReactDOM.","url":"https://github.com/liferay/alloy-editor/issues/365"},{"icon":"packaging","title":"Works in GitHub Electron","description":"After heavily discussing all the possibilities to make it working with Electron, we finally did it! Since version 0.7, AlloyEditor loads fine in Electron.","url":"https://github.com/liferay/alloy-editor/issues/350"},{"icon":"packaging","title":"Works with Browserify","description":"Another highly requested feature was to make it working with Browserify. This became possible in version 0.7","url":"https://github.com/liferay/alloy-editor/issues/338"},{"icon":"command-line","title":"New editorUpdate event","description":"AlloyEditor now notifies the outside world about state changes so other non-react apps could be seamlessly integrated.","url":"https://github.com/liferay/alloy-editor/issues/366"},{"icon":"hammer","title":"Bug Fixes","description":"Some bugfixes and improvements like centering the toolbar when the selection is an image or a table, hiding the toolbars after destroying and recreating the editor.","url":"https://github.com/liferay/alloy-editor/issues/371"}]},{"major":true,"version":"0.6.0","features":[{"icon":"groups","title":"Image centering","description":"Adds a new button for centering images. This button was contributed by Evan Francis (thanks!)","url":"https://github.com/liferay/alloy-editor/issues/322"},{"icon":"hammer","title":"Bug Fixes","description":"Fixes issues related to keeping the toolbar in the view and handling contenteditable property on destroying the editor. Thanks to Damien Pobel and Matthew Leffler for the contributions!","url":"https://github.com/liferay/alloy-editor/pull/356"}]},{"version":"0.5.2","features":[{"icon":"hammer","title":"Bug Fixes","description":"Fixes an issue with using non-bundled version of React","url":"https://github.com/liferay/alloy-editor/issues/333"}]},{"version":"0.5.1","features":[{"icon":"hammer","title":"Bug Fixes","description":"Fixes an issue with the minimized dist files","url":"https://github.com/liferay/alloy-editor/issues/329"},{"icon":"command-line","title":"Documentation updates","description":"Properly documents the regexBasePath property in AlloyEditor class","url":"https://github.com/liferay/alloy-editor/issues/331"}]},{"major":true,"version":"0.5.0","features":[{"icon":"server","title":"AlloyEditor On The Server","description":"AlloyEditor can now be used safely in Node.js environments"},{"icon":"hammer","title":"Bug Fixes","description":"Fixes an issue regarding errors if the editor has no focus","url":"https://github.com/liferay/alloy-editor/issues/325"}]},{"version":"0.4.1","features":[{"icon":"packaging","title":"Better npm Packaging","description":"Better compliance with npm packaging. Added main attribute"}]},{"major":true,"version":"0.4.0","features":[{"icon":"module","title":"CKEditor Plugin Support","description":"You can now use almost every CKEditor plugin out of the box!","url":"/docs/use/use_ckeditor_plugins.html"},{"icon":"skins","title":"Improved Skin Infrastructure","description":"Creates a new skin infrastructure, more extensible and component-based"},{"icon":"skins","title":"Atlas Skin","description":"Adds a new Atlas skin"},{"icon":"hammer","title":"Bug Fixes","description":"Fixes several issues"},{"icon":"module","title":"CKEditor 4.5.1","description":"Updates to the latest CKEditor version","url":"http://ckeditor.com/blog/CKEditor-4.5-Released"}]},{"version":"0.3.7","features":[{"icon":"hammer","title":"Bug Fixes","description":"Fixes an issue relating to the image button"}]},{"version":"0.3.6","features":[{"icon":"skins","title":"Simpler CSS Prefix","description":"Simplifies css alloy-editor prefix to use ae instead"}]},{"version":"0.3.5","features":[{"icon":"groups","title":"Table Headings","description":"Adds support and a new button to control the heading style inside a table","url":"/docs/features/tableheading.html"},{"icon":"packaging","title":"Editor Version","description":"You can now easily check the editor version being used"},{"icon":"hammer","title":"Bug Fixes","description":"Fixes issues relating to the UI disappearing in some scenarios"},{"icon":"build","title":"Better Language Support","description":"It is now possible to incrementally update lang files"}]},{"version":"0.3.4","features":[{"icon":"tests","title":"Better Test Infrastructure","description":"Improves test infrastructure and adds new tests"},{"icon":"build","title":"Compiled With Babel","description":"AlloyEditor React UI is now compiled using Babel"}]},{"version":"0.3.2","features":[{"icon":"hammer","title":"Bug Fixes","description":"Fixes several issues relating to API and CSS undesired effects"},{"icon":"packaging","title":"Updated Dependencies","description":"Updates project dependencies and adds a breaking changes file"},{"icon":"skins","title":"Improved Skin Infrastructure","description":"Separates color and font definitions to a different file"}]},{"version":"0.3.1","features":[{"icon":"packaging","title":"Bower Component","description":"AlloyEditor is now published as a Bower Component"}]},{"major":true,"version":"0.3.0","features":[{"icon":"groups","title":"Paste Images","description":"You can now paste images directly from your clipboard!"},{"icon":"packaging","title":"Simpler Distribution Folder","description":"Simplifies the distribution folder structure"}]},{"version":"0.2.9","features":[{"icon":"hammer","title":"Bug Fixes","description":"Fixes an issue where the editor does not set 'contenteditable' properly"}]},{"version":"0.2.8","features":[{"icon":"internationalization","title":"Internationalization Support","description":"You can now use AlloyEditor in your own language"},{"icon":"accessibility","title":"Screen Reader Support","description":"Improves support for screen readers"},{"icon":"hammer","title":"Bug Fixes","description":"Fixes several issues regarding to inconsistent UI behaviours"}]},{"version":"0.2.7","features":[{"icon":"hammer","title":"Bug Fixes","description":"Fixes an issue regarding to the toolbar position when using Bootstrap"},{"icon":"tests","title":"Travis & SauceLabs","description":"Updates SauceLabs configuration to properly connect with Travis"}]},{"version":"0.2.6","features":[{"icon":"skins","title":"React UI","description":"Adds a new default UI based on React"},{"icon":"groups","title":"Tables, Styles, Images&hellip;","description":"Introduces many new buttons to add tables, styles, images from camera&hellip;","url":"/"}]},{"version":"0.2.5","features":[{"icon":"hammer","title":"Bug Fixes","description":"Fixes an issue regarding pasting content"}]},{"version":"0.2.4","features":[{"icon":"command-line","title":"Image Drop","description":"You can now directly use the generated dom element after dropping an image"},{"icon":"command-line","title":"Debounce Detach","description":"Renames the cancel method in 'Debounce' to 'detach' instead"},{"icon":"module","title":"CKEditor 4.4.5","description":"Updates to the latest CKEditor version","url":"http://ckeditor.com/blog/CKEditor-4.4.5-Released"}]},{"version":"0.2.3","features":[{"icon":"accessibility","title":"ARIA and Keyboard Support","description":"Adds basic ARIA and keyboard support for toolbars and buttons"}]},{"version":"0.2.2","features":[{"icon":"skins","title":"Skin support","description":"You can now create and use different skins"},{"icon":"command-line","title":"Button Configuration","description":"Allows buttons to receive complex configuration objects"},{"icon":"hammer","title":"Bug Fixes","description":"Fixes several issues"}]},{"version":"0.2.1","features":[{"icon":"license","title":"LGPL license","description":"AlloyEditor is now licensed under LGPL instead of MIT"}]}],"content":" Updates Check out what's new. ","srcFilePath":"src/pages/updates/index.soy","id":"updates","url":"/updates"}},"childIds":["api","docs","updates"]}}